<?php

/**
 * Build script for minifying CSS and JavaScript files
 * Run this before production deployment
 * 
 * Usage: php build/minify.php
 */

// Define paths
$plugin_root = dirname(__DIR__);
$build_dir = __DIR__;

// Files to minify
$css_files = [
    'admin/css/facility-locator-admin.css',
    'admin/css/facility-locator-image-gallery.css',
    'public/css/facility-locator-public.css'
];

$js_files = [
    'admin/js/facility-locator-admin.js',
    'admin/js/facility-locator-facility-form.js',
    'admin/js/facility-locator-image-gallery.js',
    'public/js/facility-locator-public.js'
];

/**
 * Simple CSS minifier
 */
function minify_css($css)
{
    // Remove comments
    $css = preg_replace('/\/\*[\s\S]*?\*\//', '', $css);

    // Remove whitespace
    $css = preg_replace('/\s+/', ' ', $css);

    // Remove unnecessary spaces around specific characters
    $css = preg_replace('/\s*([{}:;,>+~])\s*/', '$1', $css);

    // Remove trailing semicolon before closing brace
    $css = preg_replace('/;(})/', '$1', $css);

    // Remove empty rules
    $css = preg_replace('/[^{}]+\{\s*\}/', '', $css);

    return trim($css);
}

/**
 * Simple JavaScript minifier
 */
function minify_js($js)
{
    // Remove single-line comments (but preserve URLs)
    $js = preg_replace('/(?<!:)\/\/.*$/m', '', $js);

    // Remove multi-line comments
    $js = preg_replace('/\/\*[\s\S]*?\*\//', '', $js);

    // Remove unnecessary whitespace
    $js = preg_replace('/\s+/', ' ', $js);

    // Remove spaces around operators and punctuation
    $js = preg_replace('/\s*([=+\-*\/&|!<>{}();,:])\s*/', '$1', $js);

    // Remove trailing semicolons before closing braces
    $js = preg_replace('/;(})/', '$1', $js);

    return trim($js);
}

/**
 * Create backup of original file
 */
function create_backup($file_path)
{
    $backup_path = $file_path . '.backup';
    if (!file_exists($backup_path)) {
        copy($file_path, $backup_path);
        echo "Created backup: " . basename($backup_path) . "\n";
    }
}

/**
 * Process CSS files
 */
function process_css_files($files, $root_dir)
{
    foreach ($files as $file) {
        $file_path = $root_dir . '/' . $file;
        $min_path = str_replace('.css', '.min.css', $file_path);

        if (file_exists($file_path)) {
            echo "Processing CSS: " . $file . "\n";

            $content = file_get_contents($file_path);
            $original_size = strlen($content);

            $minified = minify_css($content);
            $minified_size = strlen($minified);

            // Add header comment
            $header = "/* Facility Locator - Minified CSS - " . date('Y-m-d H:i:s') . " */\n";
            $minified = $header . $minified;

            file_put_contents($min_path, $minified);

            $savings = round((($original_size - $minified_size) / $original_size) * 100, 1);
            echo "  Original: " . number_format($original_size) . " bytes\n";
            echo "  Minified: " . number_format($minified_size) . " bytes\n";
            echo "  Savings: {$savings}%\n";
            echo "  Created: " . basename($min_path) . "\n\n";
        } else {
            echo "File not found: " . $file . "\n";
        }
    }
}

/**
 * Process JavaScript files
 */
function process_js_files($files, $root_dir)
{
    foreach ($files as $file) {
        $file_path = $root_dir . '/' . $file;
        $min_path = str_replace('.js', '.min.js', $file_path);

        if (file_exists($file_path)) {
            echo "Processing JS: " . $file . "\n";

            $content = file_get_contents($file_path);
            $original_size = strlen($content);

            $minified = minify_js($content);
            $minified_size = strlen($minified);

            // Add header comment
            $header = "/* Facility Locator - Minified JS - " . date('Y-m-d H:i:s') . " */\n";
            $minified = $header . $minified;

            file_put_contents($min_path, $minified);

            $savings = round((($original_size - $minified_size) / $original_size) * 100, 1);
            echo "  Original: " . number_format($original_size) . " bytes\n";
            echo "  Minified: " . number_format($minified_size) . " bytes\n";
            echo "  Savings: {$savings}%\n";
            echo "  Created: " . basename($min_path) . "\n\n";
        } else {
            echo "File not found: " . $file . "\n";
        }
    }
}

/**
 * Update WordPress hooks to use minified files in production
 */
function create_production_config($root_dir)
{
    $config_content = "<?php
/**
 * Production configuration for Facility Locator
 * This file is auto-generated by the build script
 */

// Define whether to use minified assets
if (!defined('FACILITY_LOCATOR_USE_MINIFIED')) {
    define('FACILITY_LOCATOR_USE_MINIFIED', true);
}

/**
 * Get asset URL with minification support
 */
function facility_locator_get_asset_url(\$asset_path, \$version = '1.0.0') {
    if (FACILITY_LOCATOR_USE_MINIFIED) {
        // Check if minified version exists
        \$path_info = pathinfo(\$asset_path);
        \$min_asset = \$path_info['dirname'] . '/' . \$path_info['filename'] . '.min.' . \$path_info['extension'];
        \$min_file_path = FACILITY_LOCATOR_PATH . \$min_asset;
        
        if (file_exists(\$min_file_path)) {
            return FACILITY_LOCATOR_URL . \$min_asset . '?v=' . \$version;
        }
    }
    
    return FACILITY_LOCATOR_URL . \$asset_path . '?v=' . \$version;
}
";

    $config_path = $root_dir . '/includes/production-config.php';
    file_put_contents($config_path, $config_content);
    echo "Created production config: includes/production-config.php\n\n";
}

/**
 * Generate asset manifest for cache busting
 */
function generate_asset_manifest($root_dir)
{
    $manifest = [];

    // Scan for all CSS and JS files
    $asset_dirs = ['admin/css', 'admin/js', 'public/css', 'public/js'];

    foreach ($asset_dirs as $dir) {
        $dir_path = $root_dir . '/' . $dir;
        if (is_dir($dir_path)) {
            $files = glob($dir_path . '/*.{css,js}', GLOB_BRACE);
            foreach ($files as $file) {
                $relative_path = str_replace($root_dir . '/', '', $file);
                $manifest[$relative_path] = [
                    'hash' => md5_file($file),
                    'size' => filesize($file),
                    'modified' => filemtime($file)
                ];
            }
        }
    }

    $manifest_path = $root_dir . '/build/asset-manifest.json';
    file_put_contents($manifest_path, json_encode($manifest, JSON_PRETTY_PRINT));
    echo "Generated asset manifest: build/asset-manifest.json\n";
}

// Main execution
echo "=== Facility Locator Build Script ===\n";
echo "Starting minification process...\n\n";

// Process CSS files
echo "Processing CSS files...\n";
process_css_files($css_files, $plugin_root);

// Process JavaScript files
echo "Processing JavaScript files...\n";
process_js_files($js_files, $plugin_root);

// Create production configuration
echo "Creating production configuration...\n";
create_production_config($plugin_root);

// Generate asset manifest
echo "Generating asset manifest...\n";
generate_asset_manifest($plugin_root);

echo "=== Build Complete ===\n";
echo "Minified files have been created.\n";
echo "Update your enqueue functions to use the minified versions for production.\n";
echo "\nNext steps:\n";
echo "1. Test the minified files in a staging environment\n";
echo "2. Update your PHP classes to use facility_locator_get_asset_url() function\n";
echo "3. Set FACILITY_LOCATOR_USE_MINIFIED to true in production\n";
echo "4. Consider setting up automated builds with GitHub Actions or similar\n";
